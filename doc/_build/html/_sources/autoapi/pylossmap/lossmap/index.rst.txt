:mod:`pylossmap.lossmap`
========================

.. py:module:: pylossmap.lossmap


Module Contents
---------------


.. py:class:: LossMap(data, background=None, datetime=None, context=None)

   .. method:: meta(self)
      :property:



   .. method:: set_background(self, LM_bg)


      Links the provided background LossMap to this one.

      :param LM_bg: Background LossMap
      :type LM_bg: LossMap

      :raises ValueError: If the provided background is not a LossMap instance.


   .. method:: get_background(self)


      Returns the linked background LossMap

      :returns: the linked LossMap instance.
      :rtype: LossMap


   .. method:: copy(self)


      Creates a copy of the current instance.

      :returns: Copied LossMap instance.
      :rtype: LossMap


   .. method:: filter(self, reg)


      Applies a regexp filter to the BLM names a returns a filters LossMap
      instance.

      :param reg: regexp string.
      :type reg: str

      :returns: LossMap instance containing the BLMs which matched the
                regex string.
      :rtype: LossMap


   .. method:: normalize(self, wrt='max')


      Normalizes the loss map data.

      :param wrt: Either 'max' or a BLM name.
      :type wrt: str, optional

      :returns: LossMap instance normalized.
      :rtype: LossMap


   .. method:: clean_background(self)


      Substracts the background from the data.

      :returns: LossMap instance with cleaned data.
      :rtype: LossMap


   .. method:: DS(self)


      Selects the BLMs in the dispersion supperssor region.

      :returns: LossMap instance containing the dispersion suppressors
                BLMs.
      :rtype: LossMap


   .. method:: IR(self, *IRs)


      Filters the BLMs based on the IR(s).

      :param \*IRs: IR(s) of interests.
      :type \*IRs: int

      :returns: LossMap instance with the filtered IR(s).
      :rtype: LossMap


   .. method:: TCP(self, HVS=False)


      Selects only the TCP BLMs.

      :returns: LossMap instance containing the TCP BLMs.
      :rtype: LossMap


   .. method:: TCS(self)


      Selects only the TCS BLMs.

      :returns: LossMap instance containing the TCS BLMs.
      :rtype: LossMap


   .. method:: TCL(self)


      Selects only the TCL BLMs.

      :returns: LossMap instance containing the TCS BLMs.
      :rtype: LossMap


   .. method:: TCTP(self)


      Selects only the TCTP BLMs.

      :returns: LossMap instance containing the TCTP BLMs.
      :rtype: LossMap


   .. method:: TCLI(self)


      Selects only the TCLI BLMs.

      :returns: LossMap instance containing the TCLI BLMs.
      :rtype: LossMap


   .. method:: side(self, RL)


      Filters the BLMs based on their side.

      :param RL: Either "R" or "L" or "RL".
      :type RL: str

      :returns: LossMap instance with the filtered BLMs.
      :rtype: LossMap


   .. method:: cell(self, *cells)


      Filters the BLMs based on their cell number(s).

      :param \*cells: cells of interest.
      :type \*cells: int

      :returns: LossMap instance with the filtered cells.
      :rtype: LossMap


   .. method:: beam(self, *beams)


      Filters the BLMs based on the beam(s).

      :param \*beam: Beams of interest, subset of {0,1,2}.
      :type \*beam: int

      :returns: LossMap instance with the filtered beam(s).
      :rtype: LossMap


   .. method:: type(self, types)


      Gets the BLM for the requested blm types.

      :param types: string or list of the types of interest.
      :type types: list/str

      :returns: LossMap instance with the desired BLM types.
      :rtype: LossMap


   .. method:: beam_ratio(self, beam)


      Beam loss ratio.

      :param beam: requested beam.
      :type beam: int

      :returns: requested beam summed/total losses.
      :rtype: float


   .. method:: cleaning(self, IR=7)


      Cleaning efficiency ?
      TODO : make sure this is correct.

      :param IR: either IR 5 or 7.
      :type IR: int

      :returns: cleaning efficiency
      :rtype: float


   .. method:: plot(self, data=None, **kwargs)




.. py:class:: CollLossMap(data, coll_df=None, **kwargs)

   Bases: :class:`pylossmap.lossmap.LossMap`

   .. method:: from_loss_map(cls, loss_map, coll_df=None)
      :classmethod:


      Imports and converts a LossMap instance.


   .. method:: plane_w_avg(self, plane)


      Calculate the weighted average losses for a given plane.

      :param plane: "H" or "V"
      :type plane: str

      :returns: weighted loss average.
      :rtype: float

      :raises ValueError: if plane is not "H" or "V".


   .. method:: plane(self, plane)




