:mod:`pylossmap`
================

.. py:module:: pylossmap


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   metadata/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   blm_type_map/index.rst
   data/index.rst
   fetcher/index.rst
   lossmap/index.rst
   plotting/index.rst
   timber_vars/index.rst
   utils/index.rst


Package Contents
----------------


.. data:: logger
   

   

.. py:class:: BLMDataFetcher(d_t='30M', BLM_var='LHC.BLMI:LOSS_RS09', pbar=True, mute=False)

   .. method:: clear_header(self)


      Clears cached headers.


   .. method:: from_datetimes(self, t1, t2, keep_headers=False, **kwargs)


      Create a BLMData instance with data for the requested interval.
      Note: the time interval cannot cross fill boundaries.

      :param t1: interval start.
      :type t1: Datetime
      :param t2: interval end.
      :type t2: Datetime
      :param keep_headers: Controls whether to clear the
                           headers before fetching data.
      :type keep_headers: optional, bool
      :param \*\*kwargs: pass to BLMData __init__.

      :returns: BLMDataCycle instance with the desired data.
      :rtype: BLMDataCycle

      :raises ValueError: if time interval crosses fill boundaries, or no
          data is found.


   .. method:: from_fill(self, fill_number, beam_modes='all', unique_beam_modes=False, keep_headers=False, **kwargs)


      Create a BLMData instance with data for the requested fill and
      beam modes.

      :param fill_number: fill of interest.
      :type fill_number: int
      :param beam_modes: either 'all' to get data for
                         all beam modes, or a list of beam
                         modes to only request a subset.
      :type beam_modes: str/list, optional
      :param unique_beam_modes: If a fill contains multiple of
                                the same beam mode, they will
                                be uniquified, INJPHYS, INJPHYS
                                --> INJPHYS, INJPHYS_2. Setting
                                unique_beam_modes to True and
                                providing INJPHYS_2 in
                                beam_modes will select the
                                second beam mode.
      :type unique_beam_modes: bool, optional
      :param keep_headers: Controls whether to clear the
                           headers before fetching data.
      :type keep_headers: optional, bool
      :param \*\*kwargs: passed to BLMData __init__.

      :returns: BLMData instance with the desired data.
      :rtype: BLMData

      :raises ValueError: if no data is found.


   .. method:: bg_from_INJPROT(self, fill_number)


      Fetches BLM data of the INJPROT beam mode when there is no beam.

      :param fill_number: fill number of the fill of interest.
      :type fill_number: int

      :returns: BLMData instance with the INJPROT background data.
      :rtype: BLMData


   .. method:: bg_from_ADT_trigger(self, trigger_t, dt_prior='0S', dt_post='2S', look_back='2H', look_forward='5S', min_bg_dt='20S', max_bg_dt='10min')


      Fetches the appropriate background data by looking at the triggers
      of the ADT and figuring out a correct time range, where no triggers
      occured.

      :param trigger_t: Time of ADT trigger, if None, will
                        take the timestamp of the first
                        value.
      :type trigger_t: Datetime, optional
      :param dt_prior: time delta prior to adt turn on.
      :type dt_prior: str, optional
      :param dt_post: time delta post previous adt turn off.
      :type dt_post: str, optional
      :param look_back: look back from trigger_t when
                        fetching adt trigger data.
      :type look_back: str, optional
      :param look_forward: look forward from trigger_t when
                           fetching adt trigger data.
      :type look_forward: str, optional
      :param min_bg_dt: minimum amount of time where no ADT
                        blowup triggers occur.
      :type min_bg_dt: str, optional
      :param max_bg_dt=: maximum amount of time where no ADT
                         blowup triggers occur, to limit of the
                         amount of timber fetches.
      :type max_bg_dt=: str, optional

      :returns: DataFrame containing the background signal.
      :rtype: DataFrame


   .. method:: iter_from_ADT(self, t1, t2, look_forward='5S', look_back='0S', planes=['H', 'V'], beams=[1, 2], keep_headers=False, yield_background=False, include=['trigger', 'amp', 'length', 'gate'], conditions={})


      Generator of BLMData instances around ADT blowup triggers.

      :param t1: interval start.
      :type t1: Datetime
      :param t2: interval end.
      :type t2: Datetime
      :param look_forward: Timedelta format string, controls
                           how much data after ADT trigger to
                           fetch.
      :type look_forward: str, optional
      :param look_back: Timedelta format string, controls how
                        much data before ADT trigger to fetch.
      :type look_back: str, optional
      :param planes: ADT trigger planes of interest.
      :type planes: list, optional
      :param beams: ADT trigger beams of itnerest.
      :type beams: list, optional
      :param keep_headers: Controls whether to clear the
                           headers before fetching data.
      :type keep_headers: bool, optional
      :param yield_background: yield both the BLM data nd the
                               BLM background.
      :type yield_background: bool, optional
      :param include: which ADT information to fetch, must be a
                      key of utils.BEAM_META. Must contain at
                      least the 'trigger' key to be able to
                      determine adt trigger timings.
      :type include: list, optional
      :param conditions: dictionnay containing as key an
                         element of "include" and value a
                         function returning a bool.
                         Example: conditions={'amp': lambda x: x > 0.6} will only return data for ADT triggers with an excitation amplitude > 0.6. Mutliple condition will be combined with AND logic.
      :type conditions: dict, optional

      :Yields: *BLMData* -- BLMData instance with data surrounding the ADT
               trigger.


   .. method:: fetch_meta(self, t)


      Gets the metadata corresponding to the requested timestamp.

      :param t: Time of data.
      :type t: Datetime

      :returns: DataFrame containing blm, position and type.
      :rtype: DataFrame


   .. method:: fetch_logging_header(self, t)


      Fetch the fill's column names from independent logging headers.

      :param t: Time of data.
      :type t: DateTime

      :returns: list of columns containing the name of BLMs.
      :rtype: list


   .. method:: fetch_force_header(self, t)


      Fetch the fill's column names from header.py file.

      :param t: Time of data.
      :type t: DateTime

      :returns: list of columns containing the name of BLMs.
      :rtype: list


   .. method:: fetch_timber_header(self, t)


      Fetch the fill's column names from timber.

      :param t: time of data.
      :type t: Datetime

      :returns: list of columns containing the name of BLMs.
      :rtype: list



